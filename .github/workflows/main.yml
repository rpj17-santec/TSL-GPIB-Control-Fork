name: TSL Control Publish

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch'
        required: true
        default: 'main'
      release:
        description: 'Release Type'
        required: false
        type: choice
        default: None
        options:
          - Latest Release
          - Pre-Release

jobs:
  build:
    runs-on: windows-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch }}
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Install requirements
        run: |
          pip install -r requirements.txt

      - name: Extract version and organization
        id: extract_info
        run: |
          date=$(python -c "import re; print(re.search(r'__date__ = \"(.*?)\"', open('main.py').read()).group(1))")
          version=$(python -c "import re; print(re.search(r'__version__ = \"(.*?)\"', open('main.py').read()).group(1))")
          organization=$(python -c "import re; print(re.search(r'__organization__ = \"(.*?)\"', open('main.py').read()).group(1))")
          echo "date=$date" >> $GITHUB_ENV
          echo "version=$version" >> $GITHUB_ENV
          echo "organization=$organization" >> $GITHUB_ENV

      - name: Create src directory
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path src
          Move-Item main.py, drivers, utils, README.md -Destination src
          zip -r  src.zip  src/

      - name: Generate Spec File
        run: |
          pyinstaller --onefile --name=tsl-control src/main.py

      - name: Run Installer
        run: |
          python -m PyInstaller tsl-control.spec
      - uses: actions/upload-artifact@v4
        with:
          name: TSL-GPIB-Control-EXE
          path: dist/tsl-control.exe

      - name: Set Tag Name
        id: set_tag_name
        run: |
          if [[ $GITHUB_REF == refs/heads/feature/* ]]; then
            tag="v${{ env.version }}-feature"
          else
            tag="v${{ env.version }}"
          fi
          echo "tag_name=$tag" >> $GITHUB_ENV

      - name: Determine Release Type
        id: determine_release
        run: |
          if [[ "${{ github.event.inputs.release }}" == "Pre-Release" ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_ENV
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_ENV
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.tag_name }}
          draft: false
          prerelease: ${{ env.IS_PRERELEASE }}
          files: |
            dist/tsl-control.exe
            src.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify Release Type
        run: |
          message = "A ${{ github.event.inputs.release }} has been created."
          echo $message