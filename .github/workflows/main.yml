name: TSL Control Publish

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch'
        required: true
        default: 'main'
      release:
        description: 'Release Type'
        required: true
        type: choice
        options:
          - Latest Release
          - Pre-Release

defaults:
  run:
    shell: pwsh

jobs:
  build:
    runs-on: windows-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch }}
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Install requirements
        run: |
          pip install -r requirements.txt

      - name: Extract version and organization
        id: extract_info
        run: |
          $content = Get-Content -Path main.py -Raw
          $date = [regex]::Match($content, '__date__ = "(.*?)"').Groups[1].Value
          $version = [regex]::Match($content, '__version__ = "(.*?)"').Groups[1].Value
          $organization = [regex]::Match($content, '__organization__ = "(.*?)"').Groups[1].Value
          echo "date=$date" >> $env:GITHUB_ENV
          echo "version=$version" >> $env:GITHUB_ENV
          echo "organization=$organization" >> $env:GITHUB_ENV

      - name: Create src directory
        run: |
          # Create src directory if it doesn't exist
          New-Item -ItemType Directory -Force -Path src
          
          # Move files into the src directory
          Move-Item -Path main.py, drivers, utils, README.md -Destination src -ErrorAction Stop
          
          # Zip the src directory
          $zipFileName = "src.zip"
          Compress-Archive -Path src\* -DestinationPath $zipFileName -Force

      - name: Generate Spec File
        run: |
          $pyinstallerPath = "pyinstaller"
          $scriptPath = "src/main.py"
          $exeName = "tsl-control"
          
          # Check if PyInstaller is installed
          if (-not (Get-Command $pyinstallerPath -ErrorAction SilentlyContinue)) {
              Write-Error "PyInstaller is not installed. Please install it using pip."
              exit 1
          }
          
          # Run PyInstaller to generate the spec file
          & $pyinstallerPath --onefile --name=$exeName $scriptPath

      - name: Run Installer
        run: |
          $specFile = "tsl-control.spec"
          
          # Check if the spec file exists
          if (-Not (Test-Path $specFile)) {
              Write-Error "Spec file '$specFile' does not exist. Please check the previous step."
              exit 1
          }
          
          # Run PyInstaller with the generated spec file
          python -m PyInstaller $specFile

      - name: Upload Executable Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tsl-control
          path: dist/tsl-control.exe

      - name: Set Tag Name
        id: set_tag_name
        run: |
          $branch = $env:GITHUB_REF
          if ($branch -like "refs/heads/feature/*") {
            $tag = "v$($env:version)-feature"
          } else {
            $tag = "v$($env:version)"
          }
          echo "tag_name=$tag" >> $env:GITHUB_ENV

      - name: Determine Release Type
        id: determine_release
        shell: pwsh
        run: |
          if ($env:github.event.inputs.release -eq "Pre-Release") {
            echo "IS_PRERELEASE=true" >> $env:GITHUB_ENV
          } else {
            echo "IS_PRERELEASE=false" >> $env:GITHUB_ENV
          }

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.tag_name }}
          draft: false
          prerelease: ${{ env.IS_PRERELEASE }}
          files: |
            dist/tsl-control.exe
            src.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify Release Type
        run: |
          $message = "A $($env:GITHUB_EVENT_INPUTS_RELEASE) has been created."
          Write-Host $message